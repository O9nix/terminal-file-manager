const fs = require('fs');
const os = require('os');
const path = require('path');
const chalk = require('chalk');

let currentDir = os.homedir();
let showHidden = false;
let selectedIndex = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function getFiles(dirPath) {
    try {
        let items = fs.readdirSync(dirPath);
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (!showHidden) {
            items = items.filter(item => !item.startsWith('.'));
        }
        
        const fileList = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if (dirPath !== '/') {
            fileList.push({
                name: '..',
                isDirectory: true,
                display: 'üìÅ .. (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)'
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
        items.forEach(item => {
            const itemPath = path.join(dirPath, item);
            try {
                const stats = fs.statSync(itemPath);
                if (stats.isDirectory()) {
                    fileList.push({
                        name: item,
                        isDirectory: true,
                        display: `üìÅ ${item}/`
                    });
                } else {
                    fileList.push({
                        name: item,
                        isDirectory: false,
                        display: `üìÑ ${item}`
                    });
                }
            } catch (err) {
                fileList.push({
                    name: item,
                    isDirectory: false,
                    display: `‚ö†Ô∏è  ${item}`
                });
            }
        });
        
        return fileList;
    } catch (err) {
        return [{
            name: 'error',
            isDirectory: false,
            display: `‚ùå –û—à–∏–±–∫–∞: ${err.message}`
        }];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function getPreviewContent(selectedFile) {
    if (!selectedFile) return '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞';
    
    if (selectedFile.name === '..') {
        return 'üìÅ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥';
    }
    
    if (selectedFile.isDirectory) {
        try {
            const items = fs.readdirSync(path.join(currentDir, selectedFile.name));
            let content = `üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${selectedFile.name}\n\n`;
            content += `–°–æ–¥–µ—Ä–∂–∏—Ç: ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n`;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const previewItems = items.slice(0, 20);
            previewItems.forEach(item => {
                const itemPath = path.join(currentDir, selectedFile.name, item);
                try {
                    const stats = fs.statSync(itemPath);
                    if (stats.isDirectory()) {
                        content += `üìÅ ${item}\n`;
                    } else {
                        content += `üìÑ ${item}\n`;
                    }
                } catch {
                    content += `‚ö†Ô∏è  ${item}\n`;
                }
            });
            
            if (items.length > 20) {
                content += `\n... –∏ –µ—â–µ ${items.length - 20} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`;
            }
            
            return content;
        } catch (err) {
            return `‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n${err.message}`;
        }
    } else {
        // –î–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const filePath = path.join(currentDir, selectedFile.name);
        try {
            const stats = fs.statSync(filePath);
            let content = `üìÑ –§–∞–π–ª: ${selectedFile.name}\n`;
            content += `–†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç\n`;
            content += `–ò–∑–º–µ–Ω–µ–Ω: ${stats.mtime.toLocaleString()}\n\n`;
            
            // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
            if (stats.size > 0 && stats.size < 1000000) { // –ú–µ–Ω–µ–µ 1MB
                const fileContent = fs.readFileSync(filePath, 'utf8');
                content += fileContent.substring(0, 1000);
                if (fileContent.length > 1000) {
                    content += '\n\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)';
                }
            } else if (stats.size >= 1000000) {
                content += '‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (>1MB)';
            } else {
                content += '(–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª)';
            }
            
            return content;
        } catch (err) {
            return `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:\n${err.message}`;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–≤—É—Ö –ø–∞–Ω–µ–ª–µ–π
function displayPanels() {
    console.clear();
    
    const files = getFiles(currentDir);
    const selectedFile = files[selectedIndex];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const previewContent = getPreviewContent(selectedFile);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    const terminalWidth = process.stdout.columns || 80;
    const leftPanelWidth = Math.floor(terminalWidth * 0.4); // 40% –¥–ª—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    const rightPanelWidth = terminalWidth - leftPanelWidth - 1; // –ú–∏–Ω—É—Å 1 –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const status = showHidden ? 'üëÅÔ∏è  –ø–æ–∫–∞–∑ —Å–∫—Ä—ã—Ç—ã—Ö' : 'üôà —Å–∫—Ä—ã—Ç—ã–µ —Å–ø—Ä—è—Ç–∞–Ω—ã';
    const header = `üìÇ ${currentDir} [${status}]`;
    console.log(chalk.blue.bold(header.padEnd(terminalWidth, ' ')));
    console.log(chalk.gray('‚îÄ'.repeat(terminalWidth)));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const maxHeight = (process.stdout.rows || 30) - 5;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    for (let i = 0; i < maxHeight; i++) {
        let leftLine = '';
        let rightLine = '';
        
        // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        if (i < files.length) {
            const file = files[i];
            let displayText = file.display;
            
            // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if (displayText.length > leftPanelWidth - 4) {
                displayText = displayText.substring(0, leftPanelWidth - 7) + '...';
            }
            
            if (i === selectedIndex) {
                    
            //        leftLine = `‚ñ∂ ${displayText}`//.padEnd(leftPanelWidth,' ');
//`‚ñ∂ ${displayText}`// chalk.bgBlue.white.bold(` ‚ñ∂${displayText}`).padEnd(leftPanelWidth,' ');

               //console.log(leftLine.length) 
leftLine = chalk.cyan( `‚ñ∂  ${displayText}`)

            leftLine = leftLine.padEnd(leftPanelWidth+10, ' '); 

            //leftLine = leftLine.substring(0,leftPanelWidth)
            } else {
                leftLine = `  ${displayText}`;
            
            leftLine = leftLine.padEnd(leftPanelWidth, ' ');    
            }
        } else {
            leftLine = ' '.padEnd(leftPanelWidth, ' ');
        }
        
        // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        const previewLines = previewContent.split('\n');
        if (i < previewLines.length) {
            let previewLine = previewLines[i] || '';
            // –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
            if (previewLine.length > rightPanelWidth - 2) {
                previewLine = previewLine.substring(0, rightPanelWidth - 5) + '...';
            }
            rightLine = chalk.gray(previewLine);
        }
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É
        console.log(leftLine + '‚îÇ'+ ' ' + rightLine);
    }
    
    // –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    console.log(chalk.gray('‚îÄ'.repeat(terminalWidth)));
    console.log(chalk.gray('‚Üë/‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è | Enter - –æ—Ç–∫—Ä—ã—Ç—å | H - —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã | Q - –≤—ã—Ö–æ–¥ '));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
function changeDirectory(newPath) {
    try {
        const resolvedPath = path.resolve(currentDir, newPath);
        if (fs.statSync(resolvedPath).isDirectory()) {
            currentDir = resolvedPath;
            selectedIndex = 0;
            displayPanels();
        } else {
            console.log(chalk.red('\n‚ùå –≠—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è'));
            setTimeout(displayPanels, 1000);
        }
    } catch (err) {
        console.log(chalk.red('\n‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
        setTimeout(displayPanels, 1000);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
function startFileManager() {
    console.log(chalk.blue.bold('\nüìÇ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º raw mode –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏—à
    if (process.stdin.isTTY) {
        process.stdin.setRawMode(true);
    }
    process.stdin.setEncoding('utf8');
    process.stdin.resume();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª–∏
    displayPanels();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
    process.stdin.on('data', (key) => {
        // –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
        if (key === '\u001b[A') {
            const files = getFiles(currentDir);
            if (files.length > 0 && selectedIndex > 0) {
                selectedIndex--;
                displayPanels();
            }
        }
        // –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
        else if (key === '\u001b[B') {
            const files = getFiles(currentDir);
            if (files.length > 0 && selectedIndex < files.length - 1) {
                selectedIndex++;
                displayPanels();
            }
        }
        // Enter
        else if (key === '\r') {
            const files = getFiles(currentDir);
            if (files[selectedIndex]) {
                const selectedFile = files[selectedIndex];
                if (selectedFile.name === '..') {
                    currentDir = path.dirname(currentDir);
                    selectedIndex = 0;
                    displayPanels();
                } else if (selectedFile.isDirectory) {
                    changeDirectory(selectedFile.name);
                } else {
                    // –î–ª—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                    displayPanels();
                }
            }
        }
        // H - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
        else if (key.toLowerCase() === 'h') {
            showHidden = !showHidden;
            selectedIndex = 0;
            displayPanels();
        }
        // Q –∏–ª–∏ Ctrl+C - –≤—ã—Ö–æ–¥
        else if (key.toLowerCase() === 'q' || key === '\u0003') {
            console.log('\n' + chalk.blue('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n'));
            process.exit(0);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    process.stdout.on('resize', () => {
        displayPanels();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
    process.on('exit', () => {
        process.stdin.setRawMode(false);
        process.stdin.pause();
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
startFileManager();
